{
  "name": "com.unity.addressables",
  "displayName": "Addressables",
  "version": "2.2.2",
  "unity": "2023.1",
  "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
  "keywords": [
    "asset",
    "resources",
    "bundle",
    "bundles",
    "assetbundles"
  ],
  "dependencies": {
    "com.unity.scriptablebuildpipeline": "2.1.4",
    "com.unity.modules.assetbundle": "1.0.0",
    "com.unity.modules.imageconversion": "1.0.0",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
    "com.unity.profiling.core": "1.0.2"
  },
  "_upm": {
    "changelog": "- Fix KeyNotFoundException when clicking on local bundles in the profiler.\n- Fix bundles incorrectly marked as released in the Profiler when they are still active\n- Improved error message when trying to load a catalog in an unexpected file format.\n- Fixed issue where operation that uses WaitForCompletion can timeout much earlier than it should.\n- The build scripts were reworked so that you can extend them or copy them outside the package without having to fork the entire package.\n- A Version field was added to the Addressables object for getting the package version in the Editor.\n- Fixed an issue where tearing down the Addressables instance could happen before user tear down code was getting called.\n- Sort collections to make serialized editor files deterministic\n- Fixed issue where labels on an addressable sub-entry are incorrectly added to the former parent entry.\n- Added support for calling Release() on AsyncOperationHandles directly that couldn't before.\n- Fixed sub-object loading from AssetReferences for types that are not Sprites in a SpriteAtlas."
  },
  "upmCi": {
    "footprint": "965c2b80d4ffb77f73ae7a066d9c7b22cd8cb8e7"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.addressables@2.2/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
    "type": "git",
    "revision": "a5d37e7459f86f9108e521236be616077803ca7c"
  },
  "samples": [
    {
      "displayName": "Addressables Utility",
      "description": "This sample contains a set of utility functions for Addressables.",
      "path": "Samples~/AddressablesUtility"
    },
    {
      "displayName": "ComponentReference",
      "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
      "path": "Samples~/ComponentReference"
    },
    {
      "displayName": "Custom Build and Playmode Scripts",
      "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
      "path": "Samples~/CustomBuildAndPlaymodeScripts"
    },
    {
      "displayName": "Disable AssetImport on Build",
      "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
      "path": "Samples~/DisableAssetImportOnBuild"
    },
    {
      "displayName": "Import Groups Tool",
      "description": "A tool that imports group assets (for example from a custom package) to the current project.",
      "path": "Samples~/ImportExistingGroup"
    },
    {
      "displayName": "Prefab Spawner",
      "description": "A basic script that instantiates and destroys a prefab AssetReference.",
      "path": "Samples~/PrefabSpawner"
    }
  ],
  "_fingerprint": "4f7e840f4cce8ffab522b6febb1b52af9e928bdb"
}
